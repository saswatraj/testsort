#!/bin/bash
function usage()
{
	echo -e "\033[1musage: testsort -i init [50000] -r res [10000] -f fin [100000] -a avg [10] -o
		filename [out.txt] -s heap merge quick bubble [bubble quick]\033[0m"
	tput sgr0
	echo -e '\E[;31m'"\033[1m		-s argument should be stated last\033[0m"
	tput sgr0
}

#initialize the values with default values
init=50000
res=10000
final=100000
avg=10
filename="out.txt"
bubble=false
quick=false
merge=false
heap=false
flag=0
#if all false then later make def true

while getopts :i:r:f:a:s:o: o
do	case "$o" in 
	i)	init="$OPTARG";;
	r)	res="$OPTARG";;
	f)	final="$OPTARG";;
	a)	avg="$OPTARG";;
	o) 	filename="$OPTARG";;
	s)	if [ "$OPTARG" == "heap" ]
		then
			heap=true
			shift $(( OPTIND-1 ))
		elif [ "$OPTARG" == "bubble" ]
		then
			bubble=true
			shift $(( OPTIND-1 ))
		elif [ "$OPTARG" == "merge" ]
		then
			merge=true
			shift $(( OPTIND-1 ))
		elif [ "$OPTARG" == "quick" ]
		then
			quick=true
			shift $(( OPTIND-1 ))
		else
			flag=1
		fi
		while [ $# -gt 0 ]
		do
			if [ $1 == "heap" ]
			then
				heap=true
			elif [ $1 == "bubble" ]
			then
				bubble=true
			elif [ $1 == "merge" ]
			then
				merge=true
			elif [ $1 == "quick" ]
			then
				quick=true
			else
				flag=1
			fi
			shift
		done;;
	*)	if [ $flag -eq 0 ]
		then
			flag=1
		fi;;
	esac
done
shift $(( OPTIND-1 ))

if [ $flag -eq 1 ]
then
	usage
	exit 5
fi

#if no -s option then restore defualts
if [[ $bubble -eq 1 ]] && [[ $merge -eq 1 ]] && [[ $quick -eq 1 ]] && [[ $heap -eq 1 ]]
then
	bubble=true
	quick=true
fi

#check for consistency of data
#init should be less than final
if [ $init -gt $final ]
then
	if [ $init -eq 50000 ]
	then
		echo "ERROR : DEFAULT INITIAL VALUE $init GREATER THAN FINAL VALUE "
	elif [ $final -eq 100000 ]
	then 
		echo "ERROR : INITIAL VALUE GREATER THAN DEFAULT FINAL VALUE $final "
	else
		echo "ERROR : INITIAL VALUE GREATER THAN FINAL VALUE"
	fi
	usage
	exit 5
fi
#check for max final value entered according to C file capacity

#output file specifications
echo " "
echo "YOUR SPECIFICATIONS ::"
echo " "
echo -e "INITIAL VALUE :: \033[1m$init\033[0m"
echo -e "INCREMENT VALUE ::\033[1m$res\033[0m"
echo -e "FINAL VALUE ::\033[1m$final\033[0m"
echo -e "AVERAGE TIMES ::\033[1m$avg\033[0m"
echo -e "OUTPUT FILE NAME ::\033[1m$filename\033[0m"
echo -e "HEAPSORT TO BE DONE ::\033[1m$heap\033[0m"
echo -e "MERGESORT TO BE DONE ::\033[1m$merge\033[0m"
echo -e "QUICKSORT TO BE DONE ::\033[1m$quick\033[0m"
echo -e "BUBBLESORT TO BE DONE ::\033[1m$bubble\033[0m"
echo " "
echo "Please wait while we process the inputs ..."

cd src
#remove earlier versions of file if present
#and create a new file
if [ -f $filename ]
then
	rm $filename
	touch $filename
fi

STORAGE="tempfile.txt"

for (( i=$init; i<=final ; i=$(( $i + $res )) ))
do
	if [ -f $STORAGE ]
	then
		rm $STORAGE
		touch $STORAGE
	fi
	#generate file containing init number of random numbers
	if [ -x "gen" ]
	then
		`"./gen" "$i"`
	else
		if [ -f "generate.c" ]
		then
			gcc generate.c -o gen
			`"./gen" "$i"`
		else
			echo "ERROR :generate.c not present"
			flag=1
		fi
	fi

	#generate the sorting executables
	tavg=0
	if $bubble
	then
		if [ -x "bubble" ]
		then
			tavg=$(./bubble.sh $avg $i 2>&1)
		else
			if [ -f "bubblesort.c" ]
			then
				gcc bubblesort.c -o bubble
				tavg=$(./bubble.sh $avg $i 2>&1)
			else
				echo "ERROR :bubblesort.c not present"
				flag=1
			fi
		fi
	fi
	tavg1=0
	if $merge
	then
		if [ -x "merge" ]
		then
			tavg1=$(./merge.sh $avg $i 2>&1)
		else
			if [ -f "mergesort.c" ]
			then
				gcc mergesort.c -o merge
				tavg1=$(./merge.sh $avg $i 2>&1)
			else
				echo "ERROR :mergesort.c not present"
				flag=1
			fi
		fi
	fi
	tavg2=0
	if $heap
	then
		if [ -x "heap" ]
		then
			tavg2=$(./heap.sh $avg $i 2>&1)
		else
			if [ -f "heapsort.c" ]
			then
				gcc heapsort.c -o heap
				tavg2=$(./heap.sh $avg $i 2>&1)
			else
				echo "ERROR :heapsort.c not found"
				flag=1
			fi
		fi
	fi
	tavg3=0
	if $quick
	then
		if [ -x "quick" ]
		then
			tavg3=$(./quick.sh $avg $i 2>&1)
		else
			if [ -f "quicksort.c" ]
			then
				gcc quicksort.c -o quick
				tavg3=$(./quick.sh $avg $i 2>&1)
			else
				echo "ERROR :quicksort.c not found"
				flag=1
			fi
		fi
	fi
	tavg=$(echo " scale=8; $tavg / 1000.0" | bc )
	tavg1=$(echo " scale=8; $tavg1 / 1000.0" | bc )
	tavg2=$(echo " scale=8; $tavg2 / 1000.0" | bc )
	tavg3=$(echo "scale=8; $tavg3 / 1000.0" | bc )
	echo "$i $tavg $tavg1 $tavg2 $tavg3" >> $filename
done
`./plot.sh $filename`
