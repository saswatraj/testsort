#!/bin/bash
function usage()
{
	echo "usage: testsort -i init [50000] -r res [10000] -f fin [100000] -a avg [10] -o
		filename [out.txt] -s heap merge quick bubble [bubble quick]"
	echo "		-s argument should be stated last"
}

init=50000
res=10000
final=100000
avg=10
filename="out.txt"
bubble=false
quick=false
merge=false
heap=false
flag=0

while getopts :i:r:f:a:s:o: o
do	case "$o" in 
	i)	init="$OPTARG";;
	r)	res="$OPTARG";;
	f)	final="$OPTARG";;
	a)	avg="$OPTARG";;
	o) 	filename="$OPTARG";;
	s)	if [ "$OPTARG" == "heap" ]
		then
			heap=true
			shift $(( OPTIND-1 ))
		elif [ "$OPTARG" == "bubble" ]
		then
			bubble=true
			shift $(( OPTIND-1 ))
		elif [ "$OPTARG" == "merge" ]
		then
			merge=true
			shift $(( OPTIND-1 ))
		elif [ "$OPTARG" == "quick" ]
		then
			quick=true
			shift $(( OPTIND-1 ))
		else
			flag=1
		fi
		while [ $# -gt 0 ]
		do
			if [ $1 == "heap" ]
			then
				heap=true
			elif [ $1 == "bubble" ]
			then
				bubble=true
			elif [ $1 == "merge" ]
			then
				merge=true
			elif [ $1 == "quick" ]
			then
				quick=true
			else
				flag=1
			fi
			shift
		done;;
	*)	if [ $flag -eq 0 ]
		then
			flag=1
		fi;;
	esac
done
shift $(( OPTIND-1 ))

if [ $flag -eq 1 ]
then
	usage
	exit 5
fi

if [[ $bubble -eq 1 ]] && [[ $merge -eq 1 ]] && [[ $quick -eq 1 ]] && [[ $heap -eq 1 ]]
then
	bubble=true
	quick=true
fi


cd src
if [ -f $filename ]
then
	rm $filename
	touch $filename
fi

STORAGE="tempfile.txt"

for (( i=$init; i<=final ; i=$(( $i + $res )) ))
do
	if [ -f $STORAGE ]
	then
		rm $STORAGE
		touch $STORAGE
	fi
	`"./gen" "$i"`
	tavg=0
	tavg=$(./bubble.sh $avg $i 2>&1)
	tavg1=0
	tavg1=$(./merge.sh $avg $i 2>&1)
	tavg2=0
	tavg2=$(./heap.sh $avg $i 2>&1)
	tavg3=0
	tavg3=$(./quick.sh $avg $i 2>&1)
	tavg=$(echo " scale=8; $tavg / 1000.0" | bc )
	tavg1=$(echo " scale=8; $tavg1 / 1000.0" | bc )
	tavg2=$(echo " scale=8; $tavg2 / 1000.0" | bc )
	tavg3=$(echo "scale=8; $tavg3 / 1000.0" | bc )
	echo "$i $tavg $tavg1 $tavg2 $tavg3" >> $filename
done
`./plot.sh $filename`
